--CREATE DATABASE Ishar;

USE Ishar;

-- IMPORTANT: ADDING JAR FILE and Partition values
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;
SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

-- ==========================================================================================================================================
--  DROP AND CREATE TABLE FROM CSV data
-- ==========================================================================================================================================

DROP TABLE IF EXISTS nyc_taxi;

CREATE EXTERNAL TABLE IF NOT EXISTS nyc_taxi(
  VendorID                  INT,
  tpep_pickup_datetime      STRING,
  tpep_dropoff_datetime     STRING,
  passenger_count           INT,
  trip_distance             DOUBLE,
  RatecodeID                INT,
  store_and_fwd_flag        STRING,
  PULocationID              INT,
  DOLocationID              INT,
  payment_type              INT,
  fare_amount               DOUBLE,
  extra                     DOUBLE,
  mta_tax                   DOUBLE,
  tip_amount                DOUBLE,
  tolls_amount              DOUBLE,
  improvement_surcharge     DOUBLE,
  total_amount              DOUBLE)
row format serde 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
WITH SERDEPROPERTIES ('paths' = '')
location '/common_folder/nyc_taxi_data/'
tblproperties ("skip.header.line.count"="1");

-- ==========================================================================================================================================
--  Check for data after TABLE CREATION AND Import
-- ==========================================================================================================================================

SELECT * FROM nyc_taxi limit 10;

-- ==========================================================================================================================================
--  Count of Total Data imported
-- ==========================================================================================================================================

SELECT COUNT(*) as total_count FROM nyc_taxi;
-- Total Records = 1174569

-- ==========================================================================================================================================
-- How many records has each TPEP provider provided?
-- ==========================================================================================================================================
select VendorId as TPEP_provider,count(*) as number_of_records from nyc_taxi
group by VendorId
order by VendorId;

-- Records provided:
-- 1 (Creative Mobile Technologies, LLC) - 527386
-- 2 (VeriFone Inc.) - 647183

-- ==========================================================================================================================================
--  Basic Data Quality Checks (Considering data for 2017 Nov and Dec) -- Check for erroneous records
-- ==========================================================================================================================================

SELECT vendorid,tpep_pickup_datetime,tpep_dropoff_datetime
FROM nyc_taxi
where month(tpep_pickup_datetime) NOT IN (11,12) or year(tpep_pickup_datetime) <> '2017';

-- Vendor 2 provided data for October 2017, January 2009,January 2003,January January 2018, December 2008. Around 14 data incorrect.
-- Hence Vendor 2 data is inaccuarate for tpep_pickup_datetime and tpep_dropoff_datetime columns.

--Let's check if pickup datetime is greater than drops datetime
SELECT vendorid, COUNT(1) as Record_Count
FROM nyc_taxi where UNIX_TIMESTAMP(tpep_dropoff_datetime) < UNIX_TIMESTAMP(tpep_pickup_datetime)
GROUP BY vendorid
ORDER BY vendorid
-- We can see 73 error records
--  vendorid	Record_Count
--        1	      73

--Let's check pickup and drops when has different years
select * from nyc_taxi
where year(tpep_pickup_datetime) != year(tpep_dropoff_datetime);

-- we can see erroneous entry for 1 record where pickup year is 2017 and dropoff is 2019.

--Let's check pickup and drops when has different months in same year
select * from nyc_taxi
where year(tpep_pickup_datetime) == year(tpep_dropoff_datetime) and month(tpep_pickup_datetime) != month(tpep_dropoff_datetime);

--Data looks correct

--Let's check if we have data for months other than November or December
select year(tpep_pickup_datetime) as pickup_yr,month(tpep_pickup_datetime) as pickup_mnth, year(tpep_dropoff_datetime) as dropoff_yr,
month(tpep_dropoff_datetime) as dropoff_mnth,count(*) as trip_count from nyc_taxi
group by year(tpep_pickup_datetime),month(tpep_pickup_datetime),year(tpep_dropoff_datetime),month(tpep_dropoff_datetime);


-- Assumption 1 : Trip started in last date of month but ending in another month is considered as trip for month when it started
-- Assumption 2 : Trip started in last date of year but ending in another year is considered as trip for year when it started

-- Data quality issues:
-- 1. One record of trip starting in Jan,2003 and ending in Jan,2003
-- 2. One record of trip starting in Jan,2009 and ending in Jan,2009
-- 3. Two records of trip starting in Oct,2017 and ending in Oct,2017
-- 4. One record of trip starting in Jan,2018 and ending in Jan,2018
-- 5. Four records of trip starting in Oct,2017 and ending in Nov,2017
-- 6. One record of trip starting in Nov,2017 and ending in April,2019


-- Let's analyze the columns based on data dictionary:
select collect_set(vendorid) as unique_vendorid,collect_set(Passenger_count) as unique_Passenger_count,collect_set(RateCodeID)  as unique_RateCodeID,collect_set(Store_and_fwd_flag)  as unique_Store_and_fwd_flag
,collect_set(Payment_type) as unique_Payment_type,collect_set(Extra) as unique_Extra,collect_set(MTA_tax) as unique_MTA_tax,collect_set(Improvement_surcharge) as unique_Improvement_surcharge
from nyc_taxi;

-- output:
-- 	unique_vendorid	    unique_passenger_count	                unique_ratecodeid	            unique_store_and_fwd_flag
--	["1","2"]	    ["1","2","3","4","6","5","0","7","9","8"]	["1","2","5","3","4","99","6"]	    ["N","Y"]

--unique_payment_type	    unique_extra	                                                                        unique_mta_tax	                    unique_improvement_surcharge
--["2","1","3","4"]   	["0.5","0.0","-0.5","1.0","4.5","-1.0","1.3","0.8","0.3","-4.5","1.5","2.0","-10.6","4.8"]	["0.5","-0.5","0.0","11.4","3.0"]	["0.3","-0.3","0.0","1.0"]

-- Comments:
-- ratecodeid has 99 which is invalid as per data dictionary.Valid values are in the range 1-6
-- Extra should have only 0 , 0.50 and 1 but we can see many other values such as ["-0.5","4.5","-1.0","1.3","0.8","0.3","-4.5","1.5","2.0","-10.6","4.8"]. These rows are invalid as per data dictioanry.
-- MTA_tax should be only 0 or 0.5. we can see other invalid values such as ["-0.5","11.4","3.0"]
-- improvement_surcharge should be 0 or 0.3.we can see other invalid values such as ["0.3","0.0"]

-- Let's analyze the columns based on business rules:
-- 1. tpep_pickup_datetime should have year as 2017 and months as Nov & Dec

select vendorid,COUNT(1) from nyc_taxi where year(tpep_pickup_datetime) != 2017 or year(tpep_dropoff_datetime) not between 2017 and 2018
or month(tpep_pickup_datetime) not in (11,12) or month(tpep_dropoff_datetime) not in (11,12,1)
GROUP by vendorid;

-- We have 15 rows which are invalid, Out of 15 records one records has pick up datetime of	'2017-11-14 13:50:00' and drop was on '2019-04-24 19:21:00'.
-- Vendor 1 has 1 invalid record while vendor 2 has 14.

-- 2. Amount fields cannot be <= 0
select vendorid,COUNT(1) from nyc_taxi where fare_amount <0 or extra<0 or mta_tax<0 or tip_amount<0 or tolls_amount<0 or improvement_surcharge<0 or total_amount<0
GROUP by vendorid;
-- We have 559 rows which are invalid, vendor 2 = 558, vendor 1 = 1 records. Vendor 2 provides more bad data for the amount columns

-- 3. Trip_distance cannot be <= 0
select vendorid,COUNT(1) from nyc_taxi where trip_distance <=0
GROUP by vendorid;
-- We have 7402 rows which are invalid, vendor 2 = 3185, vendor 1 = 4217 records. Vendor 1 provides more bad data for the trip_distance column

-- 4. tpep_dropoff_datetime should always be >= tpep_pickup_datetime
select vendorid,COUNT(1) from nyc_taxi where tpep_dropoff_datetime < tpep_pickup_datetime
GROUP by vendorid;
-- We have 73 rows which are invalid, vendor 2 = 0, vendor 1 = 73 records. Vendor 1 provides more bad data for the pickup and drop datetime columns

-- 5. passenger_count cannot be 0
select vendorid,COUNT(1) from nyc_taxi where passenger_count = 0
GROUP by vendorid;
-- We have 6824 rows which are invalid, vendor 2 = 11, vendor 1 = 6813 records. Vendor 1 provides more bad data for the passenger_count column



-- Let's find overall bad data by vendorid

select vendorid,count(1) from nyc_taxi
where ratecodeid not between 1 and 6 or Extra not in (0.0 , 0.5,1.0) or MTA_tax not in ( 0.0 , 0.5) or improvement_surcharge !=0.3
or year(tpep_pickup_datetime) != 2017 or year(tpep_dropoff_datetime) not between 2017 and 2018 or month(tpep_pickup_datetime) not in (11,12) or month(tpep_dropoff_datetime) not in (11,12,1)
or fare_amount <0 or extra<0 or mta_tax<0 or tip_amount<0 or tolls_amount<0 or improvement_surcharge<0 or total_amount<0
or trip_distance <=0
or tpep_dropoff_datetime < tpep_pickup_datetime
or passenger_count = 0
GROUP by vendorid;

-- Result:
-- vendorid	record_count
-- 2       	6339
-- 1	    12732

-- Total bad records - 19071
-- We can see that overall Vendor 1(12732) has more bad records


==========================================================================================================================================================================
-- PARTITION THE DATA
==========================================================================================================================================================================

drop table if exists nyc_taxi_month_partitioned;

create external table if not exists nyc_taxi_month_partitioned
(
VendorID                  INT,
tpep_pickup_datetime      STRING,
tpep_dropoff_datetime     STRING,
passenger_count           INT,
trip_distance             DOUBLE,
RatecodeID                INT,
store_and_fwd_flag        STRING,
PULocationID              INT,
DOLocationID              INT,
payment_type              INT,
fare_amount               DOUBLE,
extra                     DOUBLE,
mta_tax                   DOUBLE,
tip_amount                DOUBLE,
tolls_amount              DOUBLE,
improvement_surcharge     DOUBLE,
total_amount              DOUBLE)
partitioned by (mnth int)
location '/user/hive/warehouse/ishar/assignment';

-- Then insert the data in the table 
insert overwrite table nyc_taxi_month_partitioned partition(mnth)
select VendorID ,
tpep_pickup_datetime ,
tpep_dropoff_datetime ,
passenger_count ,
trip_distance ,
RatecodeID ,
store_and_fwd_flag ,
PULocationID ,
DOLocationID ,
payment_type ,
fare_amount ,
extra ,
mta_tax ,
tip_amount ,
tolls_amount ,
improvement_surcharge ,
total_amount,
month(tpep_pickup_datetime) as mnth
from  nyc_taxi
where ratecodeid between 1 and 6 and Extra in (0.0 , 0.5,1.0) and MTA_tax in ( 0.0 , 0.5) and improvement_surcharge =0.3
and year(tpep_pickup_datetime) = 2017 and year(tpep_dropoff_datetime) between 2017 and 2018 and month(tpep_pickup_datetime) in (11,12) and month(tpep_dropoff_datetime) in (11,12,1)
and fare_amount >=0 and extra>=0 and mta_tax>=0 and tip_amount>=0 and tolls_amount>=0 and improvement_surcharge>=0 and total_amount>=0
and trip_distance >0
and tpep_dropoff_datetime >= tpep_pickup_datetime
and passenger_count > 0;

--Count Check
select count(*) from  nyc_taxi_month_partitioned;

-- We are left with 1155498 records after removing rows which are invalid for this analysis

--	19071 records were invalid which matches with the count found above for bad records

==========================================================================================================================================================================
-- CREATING ORC TABLE
==========================================================================================================================================================================


-- First drop the table 
DROP TABLE IF EXISTS nyc_taxi_month_partitioned_orc;

-- First, create ORC table 
create external table if not exists nyc_taxi_month_partitioned_orc
(VendorID                  INT,
tpep_pickup_datetime      STRING,
tpep_dropoff_datetime     STRING,
passenger_count           INT,
trip_distance             DOUBLE,
RatecodeID                INT,
store_and_fwd_flag        STRING,
PULocationID              INT,
DOLocationID              INT,
payment_type              INT,
fare_amount               DOUBLE,
extra                     DOUBLE,
mta_tax                   DOUBLE,
tip_amount                DOUBLE,
tolls_amount              DOUBLE,
improvement_surcharge     DOUBLE,
total_amount              DOUBLE)
partitioned by (mnth int)
stored as orc location '/user/hive/warehouse/ishar/assignment_orc'
tblproperties ("orc.compress"="SNAPPY");

-- Then, write data from partition table into ORC table 

insert overwrite table nyc_taxi_month_partitioned_orc partition(mnth)
select * from nyc_taxi_month_partitioned;

--data Check
SELECT * FROM nyc_taxi_month_partitioned_orc limit 10;

--Count Check
select count(*) from  nyc_taxi_month_partitioned_orc;
-- It has 1155498 records

==========================================================================================================================================================================
-- Analysis-I
==========================================================================================================================================================================
-- Compare the overall average fare per trip for November and December.

SELECT mnth as Month,round(AVG(Fare_amount),2) as FareAmount_Average, round(AVG(total_amount),2) as TotalAmount_Average
FROM nyc_taxi_month_partitioned_orc
GROUP BY mnth
ORDER BY mnth;

--  Results:
--	month	fareamount_average	totalamount_average
--	11	    12.91	            16.2
--	12	    12.7	            15.9

-- Comments:
-- We can see that average fares for November are slightly higher than December whereas total amount average is slightly more for Nov than Dec.


-- Explore the â€˜number of passengers per tripâ€™ - how many trips are made by each level of â€˜Passenger_countâ€™? Do most people travel solo or with other people?

SELECT passenger_count, COUNT(1) as Ride_Count
FROM nyc_taxi_month_partitioned_orc
GROUP BY passenger_count
ORDER BY Ride_Count desc;

--  Results:
-- passenger_count	ride_count
--  1	            818522
--  2	            174991
--  5	            54111
--  3	            50242
--  6	            32920
--  4	            24709
--  7	            3


-- Comments:
-- Yes people prefer travelling solo.

-- Which is the most preferred mode of payment?
SELECT payment_type, COUNT(1) as Ride_Count
FROM nyc_taxi_month_partitioned_orc
GROUP BY payment_type
ORDER BY Ride_Count desc;

--  Results:
--  payment_type	ride_count
--      1	        779766
--      2	        369593
--      3	        4813
--      4	        1326

-- Comments:
-- People prefer 1 = Credit card Payment the most.

-- What is the average tip paid per trip? 
-- Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the â€˜average tipâ€™ is a representative statistic (of the central tendency) of â€˜tip amount paidâ€™.

SELECT round(AVG(tip_amount),2) as Avg_Tip, round(percentile_approx(tip_amount, 0.25),2) as 25Perc
, round(percentile_approx(tip_amount, 0.5),2) as 50Perc, round(percentile_approx(tip_amount, 0.75),2) as 75Perc
FROM nyc_taxi_month_partitioned_orc;

-- Result:
-- avg_tip	25perc	50perc	75perc
--  1.83	   0	1.35	2.45

-- Comments:
-- As avg_tip is not approx same as 50 percentile tip,it is not representative statistic of central tendency.It suggests that it is skewed to the right which may be due to presence of some large tips.


-- Explore the â€˜Extraâ€™ (charge) variable - what fraction of total trips have an extra charge is levied?

SELECT SUM(ExtraAmtTrips)/SUM(TOTAL_Trips) as ExtraChargeTripRatio FROM
(SELECT 1 as TOTAL_Trips,
CASE WHEN extra <> 0 THEN 1
ELSE 0 END as ExtraAmtTrips
FROM nyc_taxi_month_partitioned_orc) as result;

-- Result:
-- 0.4612262418455073

-- Comments:
-- Approx 46% of trips have 'Extra' charge levied.


==========================================================================================================================================================================
-- Analysis-II
==========================================================================================================================================================================
-- What is the correlation between the number of passengers on any given trip, and the tip paid per trip? Do multiple travellers tip more compared to solo travellers?

SELECT corr(passenger_count,tip_amount) as correlation FROM nyc_taxi_month_partitioned_orc;

-- Result:
-- 	-0.005353320610411891

-- Comments:
-- There is no correlation between number of passengers and top paid per trip

-- Segregate the data into five segments of â€˜tip paidâ€™: [0-5), [5-10), [10-15) , [15-20) and >=20. Calculate the percentage share of each bucket (i.e. the fraction of trips falling in each bucket).

SELECT Tip_Bucket_Type,Trip_Count, round((Trip_Count/Total * 100),2) as Perc_Tip  FROM (
SELECT Tip_Bucket_Type,COUNT(1) as Trip_Count FROM (
SELECT 
CASE WHEN tip_amount >= 0 and tip_amount< 5 THEN '[0-5)'
     WHEN tip_amount >= 5 and tip_amount< 10 THEN '[5-10)'
     WHEN tip_amount >= 10 and tip_amount< 15 THEN '[10-15)'
     WHEN tip_amount >= 15 and tip_amount< 20 THEN '[15-20)'
     ELSE '>=20' END AS Tip_Bucket_Type
FROM nyc_taxi_month_partitioned_orc) as result1
GROUP BY Tip_Bucket_Type) as result2,(select count(1) as Total from nyc_taxi_month_partitioned_orc) as temp
order by Trip_Count desc;

-- Result:
-- 	tip_bucket_type	    trip_count	perc_tip
--  [0-5)	            1067539 	92.39
--	[5-10)	            65136	    5.64
--	[10-15)	            19587	    1.7
--	[15-20)	            2190	    0.19
--	>=20            	1046	    0.09

-- Comments:
-- 92.39% of the trips had tips in the range 0-4 USD

-- Which month has a greater average â€˜speedâ€™ - November or December? 

SELECT mnth, round(AVG(trip_distance/((UNIX_TIMESTAMP(tpep_dropoff_datetime) - UNIX_TIMESTAMP(tpep_pickup_datetime))/3600)),2) as Avg_speed_mph
FROM nyc_taxi_month_partitioned_orc
GROUP BY mnth
ORDER BY Avg_speed_mph;

-- Result:
-- mnth	avg_speed_mph
-- 11	10.97
-- 12	11.07

-- Comments:
-- December has higher average speed compared to trips in November.

-- Analyse the average speed of the most happening days of the year, i.e. 31st December (New yearâ€™s eve) and 25th December (Christmas) and compare it with the overall average. 

SELECT DAY(tpep_pickup_datetime) as Happening_Day,round(AVG(trip_distance/((UNIX_TIMESTAMP(tpep_dropoff_datetime) - UNIX_TIMESTAMP(tpep_pickup_datetime))/3600)),2) as Avg_speed_mph
FROM nyc_taxi_month_partitioned_orc
WHERE mnth = 12 AND DAY(tpep_pickup_datetime) IN (25,31)
GROUP BY DAY(tpep_pickup_datetime)
ORDER BY Avg_speed_mph DESC;


-- Result:
-- happening_day	avg_speed_mph
-- 25	            15.27
-- 31	            13.25

-- Comments:
-- December 25th has higher average speed compared to December 31st.